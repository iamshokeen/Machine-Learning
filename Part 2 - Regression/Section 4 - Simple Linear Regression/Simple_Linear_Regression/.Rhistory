cm
##Visualising the classifier
setwd("C:/Users/hp/Desktop/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 14 - Logistic Regression/Logistic_Regression")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
#
# dataset$Gender = factor(dataset$Gender,
#                         levels = c("Male","Female"),
#                         labels = c(1,2))
library(caTools)
set.seed(123)
split= sample.split(dataset$Purchased,SplitRatio = 3/4)
training_set= subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
test_set[,1:2]=scale(test_set[,1:2])
training_set[,1:2]=scale(training_set[,1:2])
##classifier
classifier = glm(Purchased~.,
family = binomial,
data = training_set)
prob_pred = predict(classifier,type = 'response',test_set[-3])
y_pred = ifelse(prob_pred>.5,1,0)
y_pred
##Confusion Matrix
cm = table(test_set[,3],y_pred)
cm
##Visualising the classifier
dataset$Gender = factor(dataset$Gender,
levels = c("Male","Female"),
labels = c(1,2))
View(dataset)
View(dataset)
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[2:5]
dataset$Gender = factor(dataset$Gender,
levels = c("Male","Female"),
labels = c(1,2))
library(caTools)
set.seed(123)
split= sample.split(dataset$Purchased,SplitRatio = 3/4)
training_set= subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
test_set[,1:2]=scale(test_set[,1:2])
training_set[,1:2]=scale(training_set[,1:2])
##classifier
classifier = glm(Purchased~.,
family = binomial,
data = training_set)
prob_pred = predict(classifier,type = 'response',test_set[-3])
y_pred = ifelse(prob_pred>.5,1,0)
y_pred
##Confusion Matrix
cm = table(test_set[,3],y_pred)
cm
cm
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
#
# dataset$Gender = factor(dataset$Gender,
#                         levels = c("Male","Female"),
#                         labels = c(1,2))
library(caTools)
set.seed(123)
split= sample.split(dataset$Purchased,SplitRatio = 3/4)
training_set= subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
test_set[,1:2]=scale(test_set[,1:2])
training_set[,1:2]=scale(training_set[,1:2])
##classifier
classifier = glm(Purchased~.,
family = binomial,
data = training_set)
prob_pred = predict(classifier,type = 'response',test_set[-3])
y_pred = ifelse(prob_pred>.5,1,0)
y_pred
##Confusion Matrix
cm = table(test_set[,3],y_pred)
cm
##Visualising the classifier
dataset$Gender = factor(dataset$Gender,
levels = c("Male","Female"),
labels = c(1,2))
View(dataset)
View(dataset)
dataset = dataset[2:5]
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[2:5]
dataset$Gender = factor(dataset$Gender,
levels = c("Male","Female"),
labels = c(1,2))
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[2:5]
dataset$Gender = factor(dataset$Gender,
levels = c("Male","Female"),
labels = c(1,2))
library(caTools)
set.seed(123)
split= sample.split(dataset$Purchased,SplitRatio = 3/4)
training_set= subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
test_set[,1:2]=scale(test_set[,1:2])
training_set[,1:2]=scale(training_set[,1:2])
View(test_set)
View(test_set)
View(training_set)
View(training_set)
View(test_set)
test_set[,1:3]=scale(test_set[,1:3])
training_set[,1:3]=scale(training_set[,1:3])
test_set[,2:3]=scale(test_set[,2:3])
training_set[,2:3]=scale(training_set[,2:3])
##classifier
classifier = glm(Purchased~.,
family = binomial,
data = training_set)
prob_pred = predict(classifier,type = 'response',test_set[-3])
y_pred = ifelse(prob_pred>.5,1,0)
y_pred
prob_pred = predict(classifier,type = 'response',test_set[-4])
y_pred = ifelse(prob_pred>.5,1,0)
y_pred
##Confusion Matrix
cm = table(test_set[,3],y_pred)
cm
##Confusion Matrix
cm = table(test_set[,4],y_pred)
cm
install.packages("sjPolts")
install.packages("sjPlot")
setwd("C:/Users/hp/Desktop/Titanic Comp")
dataset = read.csv("train.csv")
View(dataset)
dataset = dataset[2:3]
dataset = read.csv("train.csv")
dataset = dataset["Survived"]
dataset = read.csv("train.csv")
dataset = dataset["Survived","Pclass","Sex","Age"]
dataset = dataset["Survived","Pclass","Sex"]
dataset = dataset["Survived","Pclass"]
dataset = read.csv("train.csv")
dataset = dataset[c("Survived","Age")]
dataset = read.csv("train.csv")
dataset = dataset[c(2,3)]
dataset = read.csv("train.csv")
dataset = dataset[c(2,3)]
dataset = read.csv("train.csv")
dataset = dataset[c(2,3,5,6,11,7,8)]
dataset
dataset$Cabin = ifelse(is.na(dataset$Cabin),0,1)
dataset = read.csv("train.csv")
dataset = dataset[c(2,3,5,6,11,7,8)]
dataset$Cabin = ifelse(is.na(dataset$Cabin),0)
dataset$Cabin = ifelse(is.na(dataset$Cabin),0,55)
dataset = read.csv("train.csv")
dataset = dataset[c(2,3,5,6,11,7,8)]
dataset$Cabin = ifelse(is.character(dataset$Cabin),1,0)
dataset = read.csv("train.csv")
dataset = dataset[c(2,3,5,6,11,7,8)]
View(dataset)
View(dataset)
dataset$Cabin = ifelse(is.character(dataset$Cabin),1,dataset$Cabin)
dataset = read.csv("train.csv")
dataset = dataset[c(2,3,5,6,11,7,8)]
dataset$Cabin = ifelse(is.character(dataset$Cabin),1,dataset$Cabin)
dataset = read.csv("train.csv")
dataset = dataset[c(2,3,5,6,11,7,8)]
dataset$Cabin = ifelse(is.character(dataset$Cabin),1,0)
dataset$Cabin = ifelse(is.numeric(dataset$Cabin),0,1)
dataset = read.csv("train.csv")
dataset = dataset[c(2,3,5,6,11,7,8)]
dataset$Cabin = ifelse(is.numeric(dataset$Cabin),0,1)
dataset$Age= ifelse(is.na(dataset$Age),
ave(dataset$Age,FUN = function(x)mean(x,na.rm = TRUE))
,dataset$Age)
dataset = read.csv("train.csv")
dataset = dataset[c(2,3,5,6,7,8)]
dataset$Age= ifelse(is.na(dataset$Age),
ave(dataset$Age,FUN = function(x)mean(x,na.rm = TRUE))
,dataset$Age)
dataset$Sex = factor(dataset$Sex,
levels = c("Male","Female"),
labels = c(1,2))
dataset = read.csv("train.csv")
dataset = dataset[c(2,3,5,6,7,8)]
dataset$Age= ifelse(is.na(dataset$Age),
ave(dataset$Age,FUN = function(x)mean(x,na.rm = TRUE))
,dataset$Age)
dataset$Sex = factor(dataset$Sex,
levels = c("male","female"),
labels = c(1,2))
##model Building
install.packages("randomForest")
install.packages("randomForest")
install.packages("randomForest")
library(class, lib.loc = "C:/Program Files/R/R-3.6.1/library")
test_set = read.csv("train.csv")
View(test_set)
View(test_set)
test_set = read.csv("test.csv")
test_set = test_set[c(2,4,5,6,7)]
test_set = test_set[c(2,4,5,6,7)]
test_set$Sex = factor(test_set$Sex,
levels = c("male","female"),
labels = c(1,2))
test_set$Age= ifelse(is.na(test_set$Age),
ave(test_set,FUN = function(x)mean(x,na.rm = TRUE))
,test_set$Age)
##model Building
y_pred = knn(train = dataset[,-1],
test = test_set,
cl = dataset[,1],
k=11)
dataset$Age = round(dataset$Age)
test_set$Age= round(test_set$Age)
test_set = read.csv("test.csv")
test_set = test_set[c(2,4,5,6,7)]
test_set$Age= round(test_set$Age)
test_set$Age= ifelse(is.na(test_set$Age),
ave(test_set,FUN = function(x)mean(x,na.rm = TRUE))
,test_set$Age)
test_set = read.csv("test.csv")
test_set$Age= ifelse(is.na(test_set$Age),
ave(test_set,FUN = function(x)mean(x,na.rm = TRUE))
,test_set$Age)
test_set = read.csv("test.csv")
test_set$Age= ifelse(is.na(test_set$Age),
ave(test_set$Age,FUN = function(x)mean(x,na.rm = TRUE)),
test_set$Age)
test_set = test_set[c(2,4,5,6,7)]
test_set$Age= round(test_set$Age)
##model Building
y_pred = knn(train = dataset[,-1],
test = test_set,
cl = dataset[,1],
k=11)
##model Building
y_pred = knn(train = dataset[-1],
test = test_set,
cl = dataset[1],
k=11)
##model Building
y_pred = knn(train = dataset[,-1],
test = test_set,
cl = dataset[,1],
k=11)
##model Building
y_pred = knn(train = dataset[,-1],
test = test_set,
cl = dataset[,1],
k=5)
##model Building
y_pred = knn(train = dataset[,-1],
test = test_set[],
cl = dataset[,1],
k=5)
test_set$Sex = factor(test_set$Sex,
levels = c("male","female"),
labels = c(1,2))
##model Building
y_pred = knn(train = dataset[,-1],
test = test_set[],
cl = dataset[,1],
k=5)
y_pred
##model Building
y_pred = knn(train = dataset[,-1],
test = test_set[],
cl = dataset[,1],
k=11)
dataset = read.csv("train.csv")
test_set = read.csv("test.csv")
##data FOrmating
dataset = dataset[c(2,3,5,6,7,8)]
dataset$Age= ifelse(is.na(dataset$Age),
ave(dataset$Age,FUN = function(x)mean(x,na.rm = TRUE))
,dataset$Age)
dataset$Age = round(dataset$Age)
dataset$Sex = factor(dataset$Sex,
levels = c("male","female"),
labels = c(1,2))
test_set = test_set[c(2,4,5,6,7)]
test_set$Age= ifelse(is.na(test_set$Age),
ave(test_set$Age,FUN = function(x)mean(x,na.rm = TRUE)),
test_set$Age)
test_set$Age= round(test_set$Age)
test_set$Sex = factor(test_set$Sex,
levels = c("male","female"),
labels = c(1,2))
##model Building
y_pred = knn(train = dataset[,-1],
test = test_set[],
cl = dataset[,1],
k=11)
##model Building
library("class")
y_pred = knn(train = dataset[,-1],
test = test_set[],
cl = dataset[,1],
k=11)
y_pred
###exportinng data
write.csv(y_pred,"C:\Users\hp\Desktop\Titanic Comp\\MyPrediction.csv", row.names = FALSE)
###exportinng data
write.csv(y_pred,"C:\Users\hp\Desktop\Titanic Comp\\MyPrediction.csv", row.names = FALSE)
###exportinng data
write.csv(y_pred,"C\Users\hp\Desktop\Titanic Comp\\MyPrediction.csv", row.names = FALSE)
###exportinng data
write.csv(y_pred,"C:\\Users\\hp\\Desktop\\Titanic Comp\\MyPrediction.csv", row.names = FALSE)
install.packages("randomForest")
##model Building
library("randomForest")
classifier= randomForest(x= dataset[,-1],
y = dataset$Survived,
n=100)
dataset = read.csv("train.csv")
test_set = read.csv("test.csv")
##data FOrmating
dataset = dataset[c(2,3,5,6,7,8)]
dataset$Age= ifelse(is.na(dataset$Age),
ave(dataset$Age,FUN = function(x)mean(x,na.rm = TRUE))
,dataset$Age)
dataset$Age = round(dataset$Age)
dataset$Sex = factor(dataset$Sex,
levels = c("male","female"),
labels = c(1,2))
test_set = test_set[c(2,4,5,6,7)]
test_set$Age= ifelse(is.na(test_set$Age),
ave(test_set$Age,FUN = function(x)mean(x,na.rm = TRUE)),
test_set$Age)
test_set$Age= round(test_set$Age)
test_set$Sex = factor(test_set$Sex,
levels = c("male","female"),
labels = c(1,2))
classifier= randomForest(x= dataset[,-1],
y = dataset$Survived,
n=100)
classifier= randomForest(x= dataset[,-1],
y = dataset$Survived,
ntree=100)
y_pred=predict(classifier,newdata = test_set)
y_pred
y_pred = round(y_pred)
y-pred
y_pred
###exportinng data
write.csv(y_pred,"C:\\Users\\hp\\Desktop\\Titanic Comp\\MyPrediction.csv", row.names = FALSE)
###exportinng data
write.csv(y_pred,"C:\\Users\\hp\\Desktop\\Titanic Comp\\MyPredictionRandomForest.csv", row.names = FALSE)
dataset = read.csv("train.csv",stringsAsFactors = FALSE)
test_set = read.csv("test.csv",stringsAsFactors = FALSE)
##data FOrmating
dataset = dataset[c(2,3,5,6,7,8)]
dataset$Age= ifelse(is.na(dataset$Age),
ave(dataset$Age,FUN = function(x)mean(x,na.rm = TRUE))
,dataset$Age)
dataset$Age = round(dataset$Age)
dataset$Sex = factor(dataset$Sex,
levels = c("male","female"),
labels = c(1,2))
test_set = test_set[c(2,4,5,6,7)]
test_set$Age= ifelse(is.na(test_set$Age),
ave(test_set$Age,FUN = function(x)mean(x,na.rm = TRUE)),
test_set$Age)
test_set$Age= round(test_set$Age)
test_set$Sex = factor(test_set$Sex,
levels = c("male","female"),
labels = c(1,2))
##model Building
library("randomForest")
classifier= randomForest(x= dataset[,-1],
y = dataset$Survived,
ntree=100)
y_pred=predict(classifier,newdata = test_set)
y_pred = round(y_pred)
y_pred
###exportinng data
write.csv(y_pred,"C:\\Users\\hp\\Desktop\\Titanic Comp\\MyPredictionRandomForest.csv", row.names = FALSE)
dataset = read.csv("train.csv",stringsAsFactors = FALSE)
test_set = read.csv("test.csv",stringsAsFactors = FALSE)
View(dataset)
##data FOrmating
dataset = dataset[c(2,3,5,6,7,8,11)]
dataset$Cabin= ifelse(is.na(dataset$Cabin),0,1)
dataset$Age= ifelse(is.na(dataset$Age),
ave(dataset$Age,FUN = function(x)median(x,na.rm = TRUE))
,dataset$Age)
test_set$Age= ifelse(is.na(test_set$Age),
ave(test_set$Age,FUN = function(x)median(x,na.rm = TRUE)),
test_set$Age)
dataset = read.csv("train.csv",stringsAsFactors = FALSE)
test_set = read.csv("test.csv",stringsAsFactors = FALSE)
##data FOrmating
dataset = dataset[c(2,3,5,6,7,8)]
#dataset$Cabin= ifelse(is.na(dataset$Cabin),0,1)
dataset$Age= ifelse(is.na(dataset$Age),
ave(dataset$Age,FUN = function(x)median(x,na.rm = TRUE))
,dataset$Age)
dataset$Age = round(dataset$Age)
dataset$Sex = factor(dataset$Sex,
levels = c("male","female"),
labels = c(1,2))
test_set = test_set[c(2,4,5,6,7)]
test_set$Age= ifelse(is.na(test_set$Age),
ave(test_set$Age,FUN = function(x)median(x,na.rm = TRUE)),
test_set$Age)
test_set$Age= round(test_set$Age)
test_set$Sex = factor(test_set$Sex,
levels = c("male","female"),
labels = c(1,2))
##model Building
library("randomForest")
classifier= randomForest(x= dataset[,-1],
y = dataset$Survived,
ntree=1000)
y_pred=predict(classifier,newdata = test_set)
y_pred = round(y_pred)
y_pred
###exportinng data
write.csv(y_pred,"C:\\Users\\hp\\Desktop\\Titanic Comp\\MyPredictionRandomForest.csv", row.names = FALSE)
dataset = read.csv("train.csv",stringsAsFactors = FALSE)
test_set = read.csv("test.csv",stringsAsFactors = FALSE)
##data FOrmating
dataset = dataset[c(2,3,5,6,7,8,11)]
dataset$Cabin= ifelse(is.na(dataset$Cabin),dataset$Cabin = 0,dataset$Cabin = 1)
dataset$Cabin= ifelse(is.na(dataset$Cabin),0,1)
dataset = read.csv("train.csv",stringsAsFactors = FALSE)
test_set = read.csv("test.csv",stringsAsFactors = FALSE)
##data FOrmating
dataset = dataset[c(2,3,5,6,7,8,11)]
dataset$Cabin[1,1]
dataset$Cabin[1]
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
setwd("C:/Users/hp/Desktop/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing")
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
setwd("C:/Users/hp/Desktop/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression/Simple_Linear_Regression")
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
##modelling
regressor = lm(formula = Salary ~ YearsExperience,
training_set)
##predicting
y_predict = predict(regressor, newdata = test_set)
##Visualising the training sets
ggplot()+
geom_point(aes(x = training_set$YearsExperience,y = training_set$Salary),
colour = 'red')+
geom_line(aes(x=training_set$YearsExperience,y= predict(regressor,newdata = training_set)),
colour = 'blue')+
ggtitle('Years of exp v/s Salary')+
xlab('Years of Exp')+
ylab('Salary')
##visualising the test sets
ggplot()+
geom_point(aes(x = test_set$YearsExperience,y = test_set$Salary),
colour = 'red')+
geom_line(aes(x=training_set$YearsExperience,y= predict(regressor,newdata = training_set)),
colour = 'blue')+
ggtitle('Years of exp v/s Salary test')+
xlab('Years of Exp')+
ylab('Salary')
library(ggplot2)
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
##modelling
regressor = lm(formula = Salary ~ YearsExperience,
training_set)
##predicting
y_predict = predict(regressor, newdata = test_set)
##Visualising the training sets
ggplot()+
geom_point(aes(x = training_set$YearsExperience,y = training_set$Salary),
colour = 'red')+
geom_line(aes(x=training_set$YearsExperience,y= predict(regressor,newdata = training_set)),
colour = 'blue')+
ggtitle('Years of exp v/s Salary')+
xlab('Years of Exp')+
ylab('Salary')
##visualising the test sets
ggplot()+
geom_point(aes(x = test_set$YearsExperience,y = test_set$Salary),
colour = 'red')+
geom_line(aes(x=training_set$YearsExperience,y= predict(regressor,newdata = training_set)),
colour = 'blue')+
ggtitle('Years of exp v/s Salary test')+
xlab('Years of Exp')+
ylab('Salary')
